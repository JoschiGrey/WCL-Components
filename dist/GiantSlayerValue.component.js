/*!
 * Created using the WCL-TS-Components Template https://github.com/JoschiGrey/WCL-TS-Components
 * The source code can be found here https://github.com/JoschiGrey/WCL-Components
 *
 */
let getComponent;(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function s(e,t){return{component:"EnhancedMarkdown",props:{content:`\n<u># ${e} Error</u>\n${t}\n`}}}e.d(t,{default:()=>v});const i=(e,t)=>{for(const s of t)for(const t in s)if(e[t]!==s[t])return!0};class n{constructor(e,t={}){this.actors={};for(const s of e){if(!s.ability||!s.target||!s.source)continue;if(s.type.includes("stack"))continue;if("Pet"===s.target.type)continue;if("friendly"!==s.targetDisposition)continue;if(t.auraIds&&!t.auraIds.has(s.ability.id))continue;if(t.fight&&t.fight.isEventExcludedFromDamageRankings(s))continue;if(t.targetFilters&&i(s.target,t.targetFilters))continue;if(t.sourceFilters&&i(s.source,t.sourceFilters))continue;if(t.abilityFilters&&i(s.ability,t.abilityFilters))continue;const e=new r(s.source.id),n=new a(s.target.id),d=new o(s.ability.id);s.type.includes("apply")?this.addActor(e).addTarget(n).addBuff(d).buffApplied(s,t.captureEvent):s.type.includes("remove")&&this.addActor(e).addTarget(n).addBuff(d).buffRemoved(s,t.captureEvent)}}addActor(e){return this.actors[e.id]?this.actors[e.id]:(this.actors[e.id]=e,e)}getAurasBySourceActor(e){if(this.actors[e])return this.actors[e]}getSelfBuff(e,t){return this.actors[e].targets[e].buffs[t]}}class r{constructor(e){this.targets={},this.id=e}addTarget(e){return this.targets[e.id]?this.targets[e.id]:(this.targets[e.id]=e,e)}}class a{constructor(e){this.buffs={},this.id=e}addBuff(e){return this.buffs[e.id]?this.buffs[e.id]:(this.buffs[e.id]=e,e)}}class o{constructor(e){this.applied=[],this.removed=[],this.events={},this.id=e}buffApplied(e,t=!1){this.applied.push(e.timestamp),t&&(this.events[e.timestamp]=e)}buffRemoved(e,t=!1){this.removed.push(e.timestamp),t&&(this.events[e.timestamp]=e)}get appliedTimings(){return this.applied}get removedTimings(){return this.removed}get sortedTimeSpans(){if(this._sortedTimes)return JSON.parse(JSON.stringify(this._sortedTimes));for(this.applied=Array.from(new Set(this.applied)),this.removed=Array.from(new Set(this.removed));this.applied.length<this.removed.length;)this.applied.unshift(0);for(this.applied.sort(((e,t)=>e-t));this.removed.length<this.applied.length;)this.removed.push(1/0);return this.removed.sort(((e,t)=>e-t)),this._sortedTimes=Array.from(Array(Math.max(this.applied.length,this.removed.length)),((e,t)=>[this.applied[t]?this.applied[t]:0,this.removed[t]?this.removed[t]:1/0])),JSON.parse(JSON.stringify(this._sortedTimes))}isTimeInTimeSpans(e){let t=0,s=this.sortedTimeSpans.length-1;for(;t<=s;){const i=Math.floor((t+s)/2),[n,r]=this.sortedTimeSpans[i];if(e>=n&&e<=r)return!0;e<n?s=i-1:t=i+1}return!1}getFullDuration(e){let t=0;const s=this._sortedTimes?this._sortedTimes:this.sortedTimeSpans;for(const i of s){let[s,n]=i;null!=s||(s=e.startTime),null!=n||(n=e.endTime),t+=n-s}return t}}function d(e,t,s){return e.eventsByCategoryAndDisposition(t,s)}class c{constructor(e){this.timeSpans=e.sortedTimeSpans,this.currentTimeSpan=this.timeSpans.shift()}isInTimeSpan(e){if(!this.currentTimeSpan)return!1;let t=this.currentTimeSpan[0];null!=t||(t=0);let s=this.currentTimeSpan[1];return null!=s||(s=1/0),e>s?(this.currentTimeSpan=this.timeSpans.shift(),this.isInTimeSpan(e)):e>=t&&e<=s}}const u="Mastery: Giant Slayer Value",l=375087,h={},f=new Set([361500,370452,357212,357209,359077,356995,362969,353759,1,368847,382411]),p=357210,g='<AbilityIcon id={376888} icon="ability_evoker_dragonrage2.jpg">Tyranny</AbilityIcon>',m='<AbilityIcon id={362980} icon="ability_evoker_masterygiantkiller.jpg">Mastery: Giant Slayer</AbilityIcon>',y=new class{constructor(e){this.messages=[],this.debug=e}addMessage(e,t){if(!this.debug)return;const s={};s[e]=t,this.messages.push(s)}}(false);y.addMessage("HasTyranny",h);const v=getComponent=()=>{if(1!==reportGroup.fights.length)return s(u,"Please select a single fight");const e=reportGroup.fights[0];if(0===e.combatantInfoEvents.length)return s(u,"Sadly this component relies on real encounters and won't work with trash fights.");if(1!==e.combatantInfoEvents.length)return s(u,"Please select a single <Evoker>Devastation Evoker</Evoker>");const t=e.combatantInfoEvents[0].source;if(!t||"Devastation"!==e.specForPlayer(t))return s(u,"Please select a single <Evoker>Devastation Evoker</Evoker>");const i=d(e,"aurasGained","friendly"),r=new n(i,{sourceFilters:[{idInReport:t.idInReport}],auraIds:new Set([l])}),a=function(e,t,s){if(!t.source)throw new Error("Combatant Source was missing");const i=s.getSelfBuff(t.source.idInReport,l),n=new c(i);y.addMessage("dragonRageBuff",i.sortedTimeSpans);const r=[];for(const s of e){if(!s.source||!s.ability||!s.targetResources)continue;if(s.source.idInReport!==t.source.idInReport)continue;if(!s.amount)continue;if(!f.has(s.ability.id))continue;const e=s.targetResources.hitPoints/s.targetResources.maxHitPoints,i=s.ability.id===p,a=s.amount,o=n.isInTimeSpan(s.timestamp);r.push({healthPercent:e,damageDone:a,hasDragonrage:o,isDeepBreath:i,timestamp:s.timestamp})}return r}(d(e,"damage","friendly"),e.combatantInfoEvents[0],r);y.addMessage("damageSummaries",a);let o=0,h=0,v=0;const T=(e.combatantInfoEvents[0].stats.mastery/72+22.5)/100;y.addMessage("masteryPercent",T);for(const t of a){if(b(e.combatantInfoEvents[0])&&(t.hasDragonrage||t.isDeepBreath)){o+=1;let e=t.damageDone/(1+T)*(T*t.healthPercent+1);v+=t.damageDone-e}else o+=t.healthPercent;h+=t.healthPercent}y.addMessage("hasTyranny",b(e.combatantInfoEvents[0])),y.addMessage("damageGainByTyranny",v);const S=v/((e.endTime-e.startTime)/1e3);y.addMessage("dpsGain",S),h/=a.length;const I=(100*h).toFixed(2);y.addMessage("averageMasteryValue",h),o/=a.length;const E=(100*o).toFixed(2);y.addMessage("averageMasteryValueWithTyranny",o);const w=(100*T).toFixed(2),M=(h*T*100).toFixed(2),A=(o*T*100).toFixed(2),F=r.getSelfBuff(t.idInReport,l).getFullDuration(e);return{component:"EnhancedMarkdown",props:{content:`\n# <u>${u} for <Evoker>${t.name}</Evoker></u>\nOn average ${E}% (${I}% without ${g}) of ${m} got applied.\n\nWith your Mastery of ${e.combatantInfoEvents[0].stats.mastery.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")} (${w}%) and <AbilityIcon id=375087 icon='ability_evoker_dragonrage.jpg'>Dragon Rage</AbilityIcon> duration of ${(F/1e3).toFixed(0)} seconds ${g} gained you ${S.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g,",")} DPS, assuming your mastery did not change during the Encounter.\n\nOverall ${m} increased your damage by roughly ${A}% (${M}%).\n`}}};function b(e){if(!e.source)throw new Error("Combatant Info Event was incomplete");if(h[e.source.idInReport])return h[e.source.idInReport];const t=e.talentTree.find((e=>376888===e.spellId));return h[e.source.idInReport]=!!t,h[e.source.idInReport]}globalThis.getComponent=t.default})();